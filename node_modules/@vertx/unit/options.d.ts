/*
 * Copyright 2019 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

export class ReportOptions {

  constructor();
  constructor(obj: ReportOptions);
  /**
   * Set the current reporter format.
   * @param format the format
   * @return a reference to this, so the API can be used fluently
   * a   
   */
  getFormat(): string;

  /**
   * Set the current reporter format.
   * @param format the format
   * @return a reference to this, so the API can be used fluently
   * a   
   */
  setFormat(format: string): ReportOptions;

  /**
   * Set the current reporter name.
   * @param to the new reporter name
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getTo(): string;

  /**
   * Set the current reporter name.
   * @param to the new reporter name
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setTo(to: string): ReportOptions;
}

export class ReportingOptions {

  constructor();
  constructor(obj: ReportingOptions);
  /**
   * Replace the current list of reporters with a new one.
   * @param reporters the new reporters
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getReporters(): ReportOptions;

  /**
   * Replace the current list of reporters with a new one.
   * @param reporters the new reporters
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setReporters(reporters: ReportOptions): ReportingOptions;

  /**
   * Replace the current list of reporters with a new one.
   * @param reporters the new reporters
   * @return a reference to this, so the API can be used fluently
   * 
   */
  addReporter(reporters: ReportOptions): ReportingOptions;
}

export class TestOptions {

  constructor();
  constructor(obj: TestOptions);
  /**
   * Replace the current list of reporters with a new one.
   * @param reporters the new reporters
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getReporters(): ReportOptions;

  /**
   * Replace the current list of reporters with a new one.
   * @param reporters the new reporters
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setReporters(reporters: ReportOptions): TestOptions;

  /**
   * Replace the current list of reporters with a new one.
   * @param reporters the new reporters
   * @return a reference to this, so the API can be used fluently
   * 
   */
  addReporter(reporters: ReportOptions): TestOptions;

  /**
   * Set the test timeout.
   * @param timeout the timeout value in milliseconds.
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getTimeout(): number;

  /**
   * Set the test timeout.
   * @param timeout the timeout value in milliseconds.
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setTimeout(timeout: number): TestOptions;

  /**
   * Configure the execution to use an event loop when there is no one existing.
   * @param useEventLoop the even loop usage
   * @return a reference to this, so the API can be used fluently
   * 
   */
  isUseEventLoop(): boolean;

  /**
   * Configure the execution to use an event loop when there is no one existing.
   * @param useEventLoop the even loop usage
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setUseEventLoop(useEventLoop: boolean): TestOptions;
}
